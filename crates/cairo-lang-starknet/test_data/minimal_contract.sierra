type RangeCheck = RangeCheck;
type GasBuiltin = GasBuiltin;
type felt = felt;
type Array<felt> = Array<felt>;
type core::PanicResult::<core::array::Array::<core::felt>> = Enum<ut@[1629869585859386708777359278359478328649467785770005626186298023837162394309], Array<felt>, Array<felt>>;
type System = System;
type Snapshot<Array<felt>> = Snapshot<Array<felt>>;
type u32 = u32;
type Unit = Struct<ut@[1325343513152088812341467750635149026053683136611136091911357178651207272643]>;
type core::bool = Enum<ut@[1428587981972971377690703480718106917688158670535227238524565791273937320306], Unit, Unit>;
type BuiltinCosts = BuiltinCosts;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc get_gas = get_gas;
libfunc branch_align = branch_align;
libfunc jump = jump;
libfunc drop<Array<felt>> = drop<Array<felt>>;
libfunc array_new<felt> = array_new<felt>;
libfunc felt_const<375233589013918064796019> = felt_const<375233589013918064796019>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc store_temp<System> = store_temp<System>;
libfunc store_temp<core::PanicResult::<core::array::Array::<core::felt>>> = store_temp<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc snapshot_take<Array<felt>> = snapshot_take<Array<felt>>;
libfunc array_len<felt> = array_len<felt>;
libfunc u32_const<0> = u32_const<0>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc u32_eq = u32_eq;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc bool_not_impl = bool_not_impl;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc function_call<user@core::starknet::use_system_implicit> = function_call<user@core::starknet::use_system_implicit>;
libfunc felt_const<7733229381460288120802334208475838166080759535023995805565484692595> = felt_const<7733229381460288120802334208475838166080759535023995805565484692595>;
libfunc get_builtin_costs = get_builtin_costs;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc get_gas_all = get_gas_all;
libfunc function_call<user@minimal_contract::minimal_contract::MinimalContract::empty> = function_call<user@minimal_contract::minimal_contract::MinimalContract::empty>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>;
libfunc store_temp<Unit> = store_temp<Unit>;

revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([4], [5]) 4([6], [7]) };
branch_align() -> ();
jump() { 16() };
branch_align() -> ();
drop<Array<felt>>([3]) -> ();
array_new<felt>() -> ([8]);
felt_const<375233589013918064796019>() -> ([9]);
store_temp<felt>([9]) -> ([9]);
array_append<felt>([8], [9]) -> ([10]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([6]) -> ([12]);
store_temp<GasBuiltin>([7]) -> ([13]);
store_temp<System>([2]) -> ([14]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([11]) -> ([15]);
return([12], [13], [14], [15]);
snapshot_take<Array<felt>>([3]) -> ([16], [17]);
drop<Array<felt>>([16]) -> ();
array_len<felt>([17]) -> ([18]);
u32_const<0>() -> ([19]);
store_temp<u32>([18]) -> ([18]);
store_temp<RangeCheck>([4]) -> ([4]);
u32_eq([18], [19]) { fallthrough() 28() };
branch_align() -> ();
struct_construct<Unit>() -> ([20]);
enum_init<core::bool, 0>([20]) -> ([21]);
store_temp<core::bool>([21]) -> ([22]);
jump() { 33() };
branch_align() -> ();
struct_construct<Unit>() -> ([23]);
enum_init<core::bool, 1>([23]) -> ([24]);
store_temp<core::bool>([24]) -> ([22]);
jump() { 33() };
bool_not_impl([22]) -> ([25]);
store_temp<core::bool>([25]) -> ([25]);
enum_match<core::bool>([25]) { fallthrough([26]) 39([27]) };
branch_align() -> ();
drop<Unit>([26]) -> ();
jump() { 54() };
branch_align() -> ();
drop<Unit>([27]) -> ();
store_temp<System>([2]) -> ([30]);
function_call<user@core::starknet::use_system_implicit>([30]) -> ([28], [29]);
drop<Unit>([29]) -> ();
array_new<felt>() -> ([31]);
felt_const<7733229381460288120802334208475838166080759535023995805565484692595>() -> ([32]);
store_temp<felt>([32]) -> ([32]);
array_append<felt>([31], [32]) -> ([33]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([33]) -> ([34]);
store_temp<RangeCheck>([4]) -> ([35]);
store_temp<GasBuiltin>([5]) -> ([36]);
store_temp<System>([28]) -> ([37]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([34]) -> ([38]);
return([35], [36], [37], [38]);
get_builtin_costs() -> ([39]);
store_temp<BuiltinCosts>([39]) -> ([39]);
get_gas_all([4], [5], [39]) { fallthrough([40], [41]) 59([42], [43]) };
branch_align() -> ();
jump() { 70() };
branch_align() -> ();
array_new<felt>() -> ([44]);
felt_const<375233589013918064796019>() -> ([45]);
store_temp<felt>([45]) -> ([45]);
array_append<felt>([44], [45]) -> ([46]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([46]) -> ([47]);
store_temp<RangeCheck>([42]) -> ([48]);
store_temp<GasBuiltin>([43]) -> ([49]);
store_temp<System>([2]) -> ([50]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([47]) -> ([51]);
return([48], [49], [50], [51]);
function_call<user@minimal_contract::minimal_contract::MinimalContract::empty>() -> ([52]);
drop<Unit>([52]) -> ();
array_new<felt>() -> ([53]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>([53]) -> ([54]);
store_temp<RangeCheck>([40]) -> ([55]);
store_temp<GasBuiltin>([41]) -> ([56]);
store_temp<System>([2]) -> ([57]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([54]) -> ([58]);
return([55], [56], [57], [58]);
struct_construct<Unit>() -> ([1]);
store_temp<System>([0]) -> ([2]);
store_temp<Unit>([1]) -> ([3]);
return([2], [3]);
struct_construct<Unit>() -> ([0]);
store_temp<Unit>([0]) -> ([1]);
return([1]);

minimal_contract::minimal_contract::MinimalContract::__external::empty@0([0]: RangeCheck, [1]: GasBuiltin, [2]: System, [3]: Array<felt>) -> (RangeCheck, GasBuiltin, System, core::PanicResult::<core::array::Array::<core::felt>>);
core::starknet::use_system_implicit@79([0]: System) -> (System, Unit);
minimal_contract::minimal_contract::MinimalContract::empty@83() -> (Unit);
